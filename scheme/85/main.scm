(define (btree-get-key t)
  (if (equal? (car t) 'btree)
      (let* ((key (car (cdr t)))
	     (val (car (cddr t)))
	     (left (car (cdddr t)))
	     (right (car (cddddr t))))
	key)
      (throw "ERROR")))
(define (btree-get-value t)
  (if (equal? (car t) 'btree)
      (let* ((key (car (cdr t)))
	     (val (car (cddr t)))
	     (left (car (cdddr t)))
	     (right (car (cddddr t))))
	val)
      (throw "ERROR")))
(define (btree-get-left t)
  (if (equal? (car t) 'btree)
      (let* ((key (car (cdr t)))
	     (val (car (cddr t)))
	     (left (car (cdddr t)))
	     (right (car (cddddr t))))
	left)
      (throw "ERROR")))
(define (btree-get-right t)
  (if (equal? (car t) 'btree)
      (let* ((key (car (cdr t)))
	     (val (car (cddr t)))
	     (left (car (cdddr t)))
	     (right (car (cddddr t))))
	right)
      (throw "ERROR")))
(define (strcmp s1 s2)
  (cond ((string=? s1 s2) 0)
	((string<? s1 s2) -1)
	((string>? s1 s2) 1)))
(define (btree-empty)
  '())
;  (list 'btree '() '() '() '()))

(define (btree-insert key val t)
  (if (equal? t '())
      (list 'btree key val '() '())
      (let* ((tkey (btree-get-key t))
	     (tval (btree-get-value t))
	     (tleft (btree-get-left t))
	     (tright (btree-get-right t))
	     (cmp (strcmp key tkey)))
	(cond ((equal? cmp 0) (list 'btree key val tleft tright))
	      ((equal? cmp 1) (list 'btree tkey tval (btree-insert key val tleft) tright))
	      ((equal? cmp -1) (list 'btree tkey tval tleft (btree-insert key val tright)))))))

(define (btree-delete key t)
  (define (btree-delete-helper t1 t2)
    (if (equal? t2 '())
	t1
	(let* ((tkey (btree-get-key t2))
		(tval (btree-get-value t2))
		(tleft (btree-get-left t2))
		(tright (btree-get-right t2))
		(cmp (strcmp key tkey)))
	  (list 'btree tkey tval tleft (btree-delete-helper t1 tright)))))
;  (display t)
;  (display "\n")
  (if (equal? t '())
      '()
      (let* ((tkey (btree-get-key t))
	     (tval (btree-get-value t))
	     (tleft (btree-get-left t))
	     (tright (btree-get-right t))
	     (cmp (strcmp key tkey)))
;	(display "cmp:")
;	(display cmp)
;	(display key)
;	(display "\n")
	(cond ((equal? cmp 1) (list 'btree tkey tval (btree-delete key tleft) tright))
	      ((equal? cmp -1) (list 'btree tkey tval tleft (btree-delete key tright)))
	      ((equal? cmp 0) (btree-delete-helper tleft tright))))))
(define (btree-search key2 t2)
  (define (btree-search-helper key t)
    (if (equal? t '())
	#f
	(let* ((tkey (btree-get-key t))
	       (tval (btree-get-value t))
	       (tleft (btree-get-left t))
	       (tright (btree-get-right t))
	       (cmp (strcmp key tkey)))
	  (cond ((equal? cmp 0) tval)
		((equal? cmp 1) (btree-search-helper key tleft))
		((equal? cmp -1) (btree-search-helper key tright))))))
  (let* ((s (btree-search-helper key2 t2)))
    (if (equal? s #f)
	#f
	(cons key2 s))))

(let ((input->string
       (lambda (x)
         (cond
          ((symbol? x) (symbol->string x))
          ((number? x) (number->string x))
          ((string? x) x)
          (else #f)))))

  (define (main-loop t)
    (let ((command (read)))
      (cond
       ((or (equal? command 'quit) (eof-object? command))
        #t)
       ((equal? command 'insert)
        (let* ((key (input->string (read)))
               (val (input->string (read))))
          (main-loop (btree-insert key val t))))
       ((equal? command 'delete)
        (let* ((key (input->string (read))))
          (main-loop (btree-delete key t))))
       ((equal? command 'search)
        (let* ((key (input->string (read)))
               (entry (btree-search key t)))
          (if (not entry)
              (display "(not found)\n")
              (begin
                (display (cdr entry))
                (newline)))
          (main-loop t)))
       ((equal? command 'display)
	(display "dis:")
	(display t)
	(display "\n")
	(main-loop t))
       (else
        (display "(unknown command)\n")
        (main-loop t)))))
  (main-loop (btree-empty)))
