(let ((input->string
       (lambda (x)
         (cond
          ((symbol? x) (symbol->string x))
          ((number? x) (number->string x))
          ((string? x) x)
          (else #f)))))
  (define (main-loop t)
    (let ((command (read)))
      (cond
       ((or (equal? command 'quit) (eof-object? command))
        #t)
       ((equal? command 'insert)
        (let* ((key (input->string (read)))
               (val (input->string (read))))
          (main-loop (btree-insert key val t))))
       ((equal? command 'delete)
        (let* ((key (input->string (read))))
          (main-loop (btree-delete key t))))
       ((equal? command 'search)
        (let* ((key (input->string (read)))
               (entry (btree-search key t)))
          (if (not entry)
              (display "(not found)\n")
              (begin
                (display (cdr entry))
                (newline)))
          (main-loop t)))
       (else
        (display "(unknown command)\n")
        (main-loop t)))))
  (main-loop (btree-empty)))
