(define (rational a b)
  (cons a b))
(define (numerator r)
  (define (sign n)
    (cond ((= n 0) 0)
	  ((< n 0) -1)
	  ((> n 0) 1)
	  ))
  (* (abs (/ (car r) (gcd (car r) (cdr r)))) (sign (* (car r) (cdr r)))))
(define (denominator r)
  (if (= (car r) 0)
      1
      (/ (cdr r) (gcd (car r) (cdr r)))))
(define (rat-= r1 r2)
  (= (* (car r1) (cdr r2)) (* (car r2) (cdr r1))))
(define rat-+-unit (rational 0 1))
(define (rat-+ r1 r2)
  (rational (+ (* (car r1) (cdr r2)) (* (car r2) (cdr r1)))
	    (* (cdr r1) (cdr r2))))
(define (rat-+-inv r)
  (rational (- (car r))  (cdr r)))
(define rat-*-unit (rational 1 1))
(define (rat-* r1 r2)
  (rational (* (car r1) (car r2)) (* (cdr r1) (cdr r2))))
(define (rat-*-inv r)
  (if (= (numerator r) 0)
      #f
      (rational (cdr r) (car r))))
  
