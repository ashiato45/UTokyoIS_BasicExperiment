(define a
  (list ''(1 2 3 4 5)
	'(list '1 2 3 4 5)
	'(cons '1 (list 2 3 4 5))
	''('1 2 3 4 5)
	'(list . ((quote 1 . ()) 2 3 4 5))
	'(list '1 . (2 3 4 . (5)))
	'(quote . ((1 2 3 4 5)))))
(define b
  (list '(1 2 3 4 5)
	(list '1 2 3 4 5)
	(cons '1 (list 2 3 4 5))
	'('1 2 3 4 5)
	(list . ((quote 1 . ()) 2 3 4 5))
	(list '1 . (2 3 4 . (5)))
	(quote . ((1 2 3 4 5)))))
(define range '(0 1 2 3 4 5 6))
(define (nth n lst)
  (if (zero? n)
      (car lst)
      (nth (- n 1) (cdr lst))))
(define (eqcheck rng lst)
  (define (eqcheck-helper head rng lst)
      (if (equal? rng '())
	  '()
	  (let ((ind (car rng))
		(rest (cdr rng)))
	    (cons (list head ind (equal? (nth head lst) (nth ind lst)))
		  (eqcheck-helper head rest lst)))))
  (if (< (length rng) 2)
      '()
      (append (eqcheck-helper (car rng) (cdr rng) lst)
	      (eqcheck (cdr rng) lst))))

