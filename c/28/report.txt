# 型の説明
第1引数のvoid*は任意の型へのポインタを意味する。受けとっても何の型だかは分からないので、void*型に参照外しをすることはできない。ここで、ソートの対象となる配列の先頭へのポインタを渡す。

第2引数のsize_tはstddef.hで定義された型で、符号無し整数値を表す。ここで、第1引数で渡した配列の長さを渡す。

第3引数の型は第2引数と同様である。ここで、第1引数の配列の型が何バイトからなるかを渡す。sizeof(型)と書けば望む動作が得られる。第1引数がvoid*型なので、これを渡さないとどこが配列の区切りか分からなくなってしまう。

第4引数の型は「int (const void*, const void*)」への関数ポインタで、2つの値に対しどちらが手前に来るべきかを指示する。constは、関数がその値を変更しないことを保証する。負の数が帰ってきたとき、第1引数が第2引数より手前であることを意味する。

# 簡単なプログラム
#include <stdlib.h>
#include <stdio.h>

int cmp(const void* a_, const void* b_){
  int a = *(int*)(a_);
  int b = *(int*)(b_);
  if(a % 2 == b % 2){
    return a - b;
  }else{
    return a%2 - b%2;
  }
}

int main(){
  int a[5];
  scanf("%d %d %d %d %d", a, a+1, a+2, a+3, a+4);
  qsort(a, 5, sizeof(int), cmp);
  printf("%d %d %d %d %d\n", a[0], a[1], a[2], a[3], a[4]);
  return 0;
}

# 挙動
これは、5つの値を受けとり、それらを偶数を優先した昇順に並びかえるプログラムである。例えば、「1 2 3 4 5」と与えると、偶数はどの奇数よりも手前に来ることから「2 4 1 3 5」という出力を得る。
